"use client";

import { PlayIcon } from "@heroicons/react/24/solid";
import { useState } from "react";
import { applyElementStyles, getElementText } from "@/lib/utils";

export default function About({
	sectionId,
	elementProps = {},
	selectedElementPath,
}) {
	const [isVideoPlaying, setIsVideoPlaying] = useState(false);

	return (
		<div className="bg-[#0a0a0a] py-24 sm:py-32">
			<div className="mx-auto max-w-7xl px-6 lg:px-8">
				<div className="mx-auto max-w-2xl lg:mx-0">
					<h2
						data-element-path="tagline"
						className={`${applyElementStyles(
							"text-base font-semibold leading-7 text-indigo-400",
							elementProps["tagline"]
						)} ${
							selectedElementPath === `${sectionId}.tagline`
								? "selected-element"
								: ""
						}`}
					>
						{getElementText("Our Story", elementProps["tagline"])}
					</h2>
					<p
						data-element-path="main-heading"
						className={`${applyElementStyles(
							"mt-2 text-3xl font-bold tracking-tight text-white sm:text-4xl",
							elementProps["main-heading"]
						)} ${
							selectedElementPath === `${sectionId}.main-heading`
								? "selected-element"
								: ""
						}`}
					>
						{getElementText(
							"Democratizing backend development",
							elementProps["main-heading"]
						)}
					</p>
					<p
						data-element-path="main-description"
						className={`${applyElementStyles(
							"mt-6 text-lg leading-8 text-gray-300",
							elementProps["main-description"]
						)} ${
							selectedElementPath ===
							`${sectionId}.main-description`
								? "selected-element"
								: ""
						}`}
					>
						{getElementText(
							"We believe that building APIs shouldn't require months of development or deep technical expertise. ThinCrust was born from the frustration of watching great ideas get stuck in development bottlenecks.",
							elementProps["main-description"]
						)}
					</p>
				</div>

				<div className="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
					<div className="grid max-w-xl grid-cols-1 gap-8 lg:max-w-none lg:grid-cols-2">
						<div>
							<h3
								data-element-path="feature-1-title"
								className={`${applyElementStyles(
									"text-xl font-bold leading-8 text-white",
									elementProps["feature-1-title"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-1-title`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Visual-first approach",
									elementProps["feature-1-title"]
								)}
							</h3>
							<p
								data-element-path="feature-1-desc"
								className={`${applyElementStyles(
									"mt-4 text-base leading-7 text-gray-300",
									elementProps["feature-1-desc"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-1-desc`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Our drag-and-drop interface lets you design complex database schemas and API logic without writing a single line of code. Connect tables, define relationships, and set up authentication flows visually.",
									elementProps["feature-1-desc"]
								)}
							</p>
							<h3
								data-element-path="feature-2-title"
								className={`${applyElementStyles(
									"mt-8 text-xl font-bold leading-8 text-white",
									elementProps["feature-2-title"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-2-title`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Production-ready from day one",
									elementProps["feature-2-title"]
								)}
							</h3>
							<p
								data-element-path="feature-2-desc"
								className={`${applyElementStyles(
									"mt-4 text-base leading-7 text-gray-300",
									elementProps["feature-2-desc"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-2-desc`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Every API generated by ThinCrust follows industry best practices for security, performance, and scalability. Built-in features like rate limiting, caching, and monitoring mean your APIs are enterprise-ready from the start.",
									elementProps["feature-2-desc"]
								)}
							</p>
							<h3
								data-element-path="feature-3-title"
								className={`${applyElementStyles(
									"mt-8 text-xl font-bold leading-8 text-white",
									elementProps["feature-3-title"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-3-title`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Developer-friendly",
									elementProps["feature-3-title"]
								)}
							</h3>
							<p
								data-element-path="feature-3-desc"
								className={`${applyElementStyles(
									"mt-4 text-base leading-7 text-gray-300",
									elementProps["feature-3-desc"]
								)} ${
									selectedElementPath ===
									`${sectionId}.feature-3-desc`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"When you need more control, export clean, well-documented code in your preferred framework. Our platform enhances developer productivity rather than replacing developers.",
									elementProps["feature-3-desc"]
								)}
							</p>
						</div>

						<div className="relative">
							<div className="aspect-[16/9] overflow-hidden rounded-xl bg-gray-900 shadow-xl lg:aspect-[3/2]">
								{!isVideoPlaying ? (
									<div className="relative h-full">
										<img
											alt="ThinCrust API Builder interface showing visual endpoint configuration"
											src="https://tailwindcss.com/plus-assets/img/component-images/dark-project-app-screenshot.png"
											className="h-full w-full object-cover"
										/>
										<div className="absolute inset-0 flex items-center justify-center bg-black/30">
											<button
												onClick={() =>
													setIsVideoPlaying(true)
												}
												className="flex h-16 w-16 items-center justify-center rounded-full bg-white/20 backdrop-blur-sm transition-all hover:bg-white/30 hover:scale-110"
											>
												<PlayIcon className="h-8 w-8 text-white ml-1" />
											</button>
										</div>
									</div>
								) : (
									<div className="h-full w-full bg-gray-800 flex items-center justify-center">
										<div className="text-center">
											<PlayIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
											<p className="text-gray-400">
												Demo video would play here
											</p>
											<button
												onClick={() =>
													setIsVideoPlaying(false)
												}
												className="mt-4 text-indigo-400 hover:text-indigo-300"
											>
												Back to preview
											</button>
										</div>
									</div>
								)}
							</div>
						</div>
					</div>
				</div>

				<div className="mt-16 border-t border-gray-800 pt-16">
					<div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-4">
						<div className="text-center">
							<dt
								data-element-path="stat-1-number"
								className={`${applyElementStyles(
									"text-3xl font-bold tracking-tight text-white",
									elementProps["stat-1-number"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-1-number`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"50k+",
									elementProps["stat-1-number"]
								)}
							</dt>
							<dd
								data-element-path="stat-1-label"
								className={`${applyElementStyles(
									"mt-1 text-base leading-6 text-gray-300",
									elementProps["stat-1-label"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-1-label`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"APIs created",
									elementProps["stat-1-label"]
								)}
							</dd>
						</div>
						<div className="text-center">
							<dt
								data-element-path="stat-2-number"
								className={`${applyElementStyles(
									"text-3xl font-bold tracking-tight text-white",
									elementProps["stat-2-number"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-2-number`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"10M+",
									elementProps["stat-2-number"]
								)}
							</dt>
							<dd
								data-element-path="stat-2-label"
								className={`${applyElementStyles(
									"mt-1 text-base leading-6 text-gray-300",
									elementProps["stat-2-label"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-2-label`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Requests served daily",
									elementProps["stat-2-label"]
								)}
							</dd>
						</div>
						<div className="text-center">
							<dt
								data-element-path="stat-3-number"
								className={`${applyElementStyles(
									"text-3xl font-bold tracking-tight text-white",
									elementProps["stat-3-number"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-3-number`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"500+",
									elementProps["stat-3-number"]
								)}
							</dt>
							<dd
								data-element-path="stat-3-label"
								className={`${applyElementStyles(
									"mt-1 text-base leading-6 text-gray-300",
									elementProps["stat-3-label"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-3-label`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Companies using ThinCrust",
									elementProps["stat-3-label"]
								)}
							</dd>
						</div>
						<div className="text-center">
							<dt
								data-element-path="stat-4-number"
								className={`${applyElementStyles(
									"text-3xl font-bold tracking-tight text-white",
									elementProps["stat-4-number"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-4-number`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"99.9%",
									elementProps["stat-4-number"]
								)}
							</dt>
							<dd
								data-element-path="stat-4-label"
								className={`${applyElementStyles(
									"mt-1 text-base leading-6 text-gray-300",
									elementProps["stat-4-label"]
								)} ${
									selectedElementPath ===
									`${sectionId}.stat-4-label`
										? "selected-element"
										: ""
								}`}
							>
								{getElementText(
									"Uptime guarantee",
									elementProps["stat-4-label"]
								)}
							</dd>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
